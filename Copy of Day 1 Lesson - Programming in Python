{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Day 1 Lesson - Programming in Python","provenance":[{"file_id":"1OZ3dp9xEQ-ub3GiK2nek-UmMnzmdQgyW","timestamp":1623455567479}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cp8mUrwSMa0l","executionInfo":{"status":"ok","timestamp":1635005847062,"user_tz":420,"elapsed":319,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}},"outputId":"9ac90982-efcb-41ef-c71d-226687f1bdef"},"source":["print(\"Hello, world!\")"],"execution_count":22,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, world!\n"]}]},{"cell_type":"markdown","metadata":{"id":"fO9tiKVG0svt"},"source":["# Programming in Python\n","\n","<img src=\"https://www.robotlab.com/hs-fs/hubfs/coding.jpg?width=640&name=coding.jpg\" width=\"50%\"/>\n","\n","Every programming language has three important features:\n","* **conditionals** -- for making decisions\n","* **variables** -- for storing data\n","* **loops** -- for repetitive tasks\n","\n","Another, perhaps more fundamental and powerful feature:\n","* **functions** -- for running routines\n","\n","Programming languages come in many forms, and students often wonder which language is the best. The answer is it really depends. In fact, new programming languages are created to fulfill specific needs.\n","\n","For example, **Java** was invented to address **portability**. The most popular language prior to Java was **C/C++**, which is a **compiled language**. That means, C/C++ programs will only run on the platform for which it was complied. A platform, being for example, Mac vs PC vs Linux vs toaster oven. Yes, no joke, toaster oven! In fact, Java was designed so your program can run on a toaster oven without any extra work. Java is portable to any platform. Back in 1991, the inventor, **James Gosling**, envisioned a world in which everything was computerized and connected. And he was exactly right, a visionary. Java solves the problem of portability by introducing a middle-layer, the **Java virtual vachine**, or Java-VM. Code is compiled to run on the virtual machine, and every platform has it's own Java virtual machine, thus your code can run on every platform. So, Java is also a compiled language.\n","\n","<img src=\"https://studysection.com/blog/wp-content/uploads/2019/05/Python.png\" width=\"50%\"/>\n","\n","Some say **Python is currently the most popular programming langauge** overall. What is **Python**? Unlike a compiled language, Python is an **interpreted language**. That means, on a given platform, you need to launch the interpreter, which takes commands one at a time and runs them. Python was invented by **Guido van Rossum**, and started becoming very popular in the early 2000's. It completely dirupted **Perl**, which was one of the most popular scripting languages at the time.\n","\n","Which one is better: Java or Python or C++? Well, it depends. If you require optimal speed and low-level control over hardware, C/C++ is probably the best language. If you're developing enterprise software systems, then Java is likely what you would use. If you're doing Data Science, or quick-n-dirty programs (i.e., scripts), then Python is a good choice.\n","\n","For example, check out Racket (https://docs.racket-lang.org/), it's a programming language designed specifically for teaching students about programming! It's not really used at all in the real world. It's in fact a very different kind of language than all of the above, it's a **functional programming language**, which means it treats functions as first-class citizens and it often looks and feels very differently as a result."]},{"cell_type":"markdown","metadata":{"id":"0VBvFjfhLmdf"},"source":["## Fun with variables\n","Variables store data. They are also handy for interacting with users. Below is an example of **hardcoding** data into the code. This is one way to store data, but not always the best way since you have to update the code itself. Hardcoding makes sense for things that are constant and never change, like `pi = 3.141592654` might be a good hardcoded value."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q_3lSqAlNHN3","executionInfo":{"status":"ok","timestamp":1635005981565,"user_tz":420,"elapsed":319,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}},"outputId":"81ccb51f-7d36-455f-ac4b-b0f0798724ca"},"source":["today = \"Monday\"\n","day = 14\n","month = \"June\"\n","year = 2021\n","\n","# we have to convert numbers to strings before we can \"add\" them together\n","# technically, adding strings together is called \"concatenation\"\n","print(\"Today is: \" + today + \", \" + month + \" \" + str(day) + \", \" + str(year) + \"🤖\")"],"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Today is: Monday, June 14, 2021🤖\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ebmcZFUwdIsZ","executionInfo":{"status":"ok","timestamp":1635005986070,"user_tz":420,"elapsed":306,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}},"outputId":"4c6f823b-5860-420d-8e18-bca38b917680"},"source":["print(\"Today is: \" + today + \", \" + month + \" \" + str(day) + \", \" + str(year) + \"🤖\")"],"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Today is: Monday, June 14, 2021🤖\n"]}]},{"cell_type":"markdown","metadata":{"id":"An_1QcRZ7CmI"},"source":["Another way we can **interact with a user** is by providing input prompts on the screen. This allows you to have **dynamic behavior** without changing the code every time."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8evHx_dBCqEG","executionInfo":{"status":"ok","timestamp":1635006011523,"user_tz":420,"elapsed":300,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}},"outputId":"4ae75cd8-d782-4da0-a130-4fdb59daef33"},"source":["#@title Pick a Date {run: \"auto\"}\n","date_input = '2021-12-09' #@param {type: \"date\"}\n","\n","print(\"The date you chose is: \" + date_input)"],"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["The date you chose is: 2021-12-09\n"]}]},{"cell_type":"markdown","metadata":{"id":"BK0lUDStLHkl"},"source":["Other fun **user interaction prompts** you can play with are sampled below. You might imagine making all sorts of fun, interactive widgets by using these in creative ways."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"FwhXJoVyLLeg","executionInfo":{"status":"ok","timestamp":1635006041974,"user_tz":420,"elapsed":284,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}},"outputId":"b569b8e3-470b-4899-ff94-9498e9d2c798"},"source":["#@title User Inputs {run: \"auto\"}\n","# the \"auto\" parameter will re-run this box everytime you update an input\n","# Tutorial video: https://youtu.be/oIVmV41uyK8\n","\n","number_input = 10.0 #@param {type: \"number\"}\n","number_slider = 0.7 #@param {type: \"slider\", min:-1, max:1, step:0.1}\n","text = 'hello' #@param {type: \"string\"}\n","text_and_dropdown = '2nd option' #@param [\"1st option\", \"2nd option\", \"3rd option\"] {allow-input:true}\n","date_input = '2021-10-09' #@param {type: \"date\"}\n","checkbox = True #@param {type: \"boolean\"}\n","boolean_dropdown = False #@param [\"False\", \"True\"] {type: \"raw\"}\n","\n","print(number_slider)\n","print(checkbox)"],"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["0.7\n","True\n"]}]},{"cell_type":"markdown","metadata":{"id":"8c1a3iRwNQ5-"},"source":["# Lists\n","Lists are also an important and useful construct. Python has a unique feature called *list comprehension*. Other programming languages can be more clumsy, but Python makes using lists more elegant."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"XiMQEbK818BB","executionInfo":{"status":"ok","timestamp":1635006121622,"user_tz":420,"elapsed":311,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}},"outputId":"ae197120-8473-46a4-9a35-44e00989146f"},"source":["words = [\"bye world\", \"hello world\", \"turkey\", \"bacon\", \"avocado\", \"mountain\", \"majesty\", \"booboo\", \"wisdomous\"]\n","\n","# [ ] are square brackets\n","# ( ) are parentheses     \n","# { } curly braces\n","\n","for word in words:\n","\n","  #for letter in word: # redundant?\n","  #  print(letter, sep=\",\", end=\"\")\n","  print(word, end=\"\")\n","\n","  if word is \"turkey\":\n","    print (\" - GOBBLE GOBBLE\")\n","  else:\n","    print(\".\")\n"],"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["bye world.\n","hello world.\n","turkey - GOBBLE GOBBLE\n","bacon.\n","avocado.\n","mountain.\n","majesty.\n","booboo.\n","wisdomous.\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"mrmMjMU8Vdhu","executionInfo":{"status":"ok","timestamp":1635006154989,"user_tz":420,"elapsed":335,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}},"outputId":"c3bfec0a-d9c0-4f09-e029-07f9dedc2253"},"source":["names = [\"Ayelen\", \"Dimitri\", \"Brooke\", \"Logan\", \"Nikko\", \"Maria\", \"Elias\", \"Citra\", \"Daniel\", \"Donna\", \"Erica\", \"Koren\", \"Nimilia\", \"Norma\", \"Vincent\", \"Karla\", \"Goldberry\", \"Elena\", \"Sarah\", \"Matthew\", \"Meyling\", \"Jenn\", \"Reham\", \"Samuel\", \"Beiwei\", \"Sam\", \"Tanzania\", \"Pranoy\", \"Tinai\"]\n","\n","for name in names:\n","  print(\"Hello, \", name, \"!\", sep=\"\")"],"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["Hello, Ayelen!\n","Hello, Dimitri!\n","Hello, Brooke!\n","Hello, Logan!\n","Hello, Nikko!\n","Hello, Maria!\n","Hello, Elias!\n","Hello, Citra!\n","Hello, Daniel!\n","Hello, Donna!\n","Hello, Erica!\n","Hello, Koren!\n","Hello, Nimilia!\n","Hello, Norma!\n","Hello, Vincent!\n","Hello, Karla!\n","Hello, Goldberry!\n","Hello, Elena!\n","Hello, Sarah!\n","Hello, Matthew!\n","Hello, Meyling!\n","Hello, Jenn!\n","Hello, Reham!\n","Hello, Samuel!\n","Hello, Beiwei!\n","Hello, Sam!\n","Hello, Tanzania!\n","Hello, Pranoy!\n","Hello, Tinai!\n"]}]},{"cell_type":"markdown","metadata":{"id":"npwG_Gab9jIq"},"source":["# Trees (like Christmas trees)\n","Not to be confused with `trees` as in the data structure, I want you to think about how you would print a tree using code. The simplest way would be via ASCII-ART, which is to hardcode it, like below.\n","\n","Later, we will show you how to build an ascii-tree **dynamically**, using code!\n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dmAKLnq19w_L","executionInfo":{"status":"ok","timestamp":1635006174426,"user_tz":420,"elapsed":311,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}},"outputId":"c5df3f58-b949-4f4f-c501-27708acce947"},"source":["print(\"          *\")\n","print(\"         * *\")\n","print(\"        *   *\")\n","print(\"       *     *\")\n","print(\"      *       *\")\n","print(\"     *         *\")\n","print(\"    *           *\")\n","print(\"   *             *\")\n","print(\"  *               *\")\n","print(\" *                 *\")\n","print(\"*                   *\")"],"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["          *\n","         * *\n","        *   *\n","       *     *\n","      *       *\n","     *         *\n","    *           *\n","   *             *\n","  *               *\n"," *                 *\n","*                   *\n"]}]},{"cell_type":"markdown","metadata":{"id":"OOjrJTtiXbGE"},"source":["# Functions\n","\n","Another important building block of all programming languages are **functions**.\n"]},{"cell_type":"code","metadata":{"id":"vWsYMtJ9xoDn","executionInfo":{"status":"ok","timestamp":1635004326917,"user_tz":420,"elapsed":14,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}}},"source":["# Encrypt a message using a simple cipher\n","def encrypt(message, cipher):\n","  codedMessage = \"\"\n","\n","  for letter in message: # \"hello\"\n","    newLetter = chr(ord(letter) + cipher)  # \"h\" becomes \"k\" when cipher is 3\n","    codedMessage = codedMessage + newLetter\n","\n","  return codedMessage"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"vv8fG8nlXlvv","executionInfo":{"status":"ok","timestamp":1635004326918,"user_tz":420,"elapsed":15,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}}},"source":["# Decrypt a message using a simple cipher\n","def decrypt(codedMessage, cipher):\n","  decodedMessage = \"\"\n","\n","  for letter in codedMessage:\n","    newLetter = chr(ord(letter) - cipher)  # \"k\" becomes \"h\" when cipher is 3\n","    decodedMessage = decodedMessage + newLetter\n","\n","  return decodedMessage"],"execution_count":10,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"F2xe2ndvrIHN","executionInfo":{"status":"ok","timestamp":1635004326918,"user_tz":420,"elapsed":15,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}},"outputId":"a8fa9f46-5721-44e8-abec-bf839e522c85"},"source":["encrypt(\"this is my secret\", 7)"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["\"{opz'pz't\\x80'zljyl{\""]},"metadata":{},"execution_count":11}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"xSVEJQRAx2si","executionInfo":{"status":"ok","timestamp":1635004326919,"user_tz":420,"elapsed":14,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}},"outputId":"47812bc9-1bbd-457a-a13f-67948d996244"},"source":["decrypt(\"{opz'pz't\\x80'zljyl{\", 7)"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'this is my secret'"]},"metadata":{},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"1fJVt2_pxk3v","executionInfo":{"status":"ok","timestamp":1635004326919,"user_tz":420,"elapsed":14,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}},"outputId":"39844cce-e6af-4326-8ecb-b71326e07c85"},"source":["decrypt(\"o&igt&zgrq&zu&hkky\", 6)"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'i can talk to bees'"]},"metadata":{},"execution_count":13}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":35},"id":"gW1J1BnfyQ0u","executionInfo":{"status":"ok","timestamp":1635004326919,"user_tz":420,"elapsed":13,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}},"outputId":"c7529a9b-2484-41b4-a73b-7f6ed155e92f"},"source":["decrypt(\"[ipp${ipp${ipp222$Mj$mx$mwr+x$xli$kviex$Yrmw$Tvmqi2\", 4)"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["\"Well well well... If it isn't the great Unis Prime.\""]},"metadata":{},"execution_count":14}]},{"cell_type":"markdown","metadata":{"id":"zZ47A9atzbtd"},"source":["# Hacking\n","If you're encryption algorithm and code is too simple, hackers can crack it pretty easily. For example..."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tk-GnizWq-qc","executionInfo":{"status":"ok","timestamp":1635004326920,"user_tz":420,"elapsed":13,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}},"outputId":"c863a81a-30cc-4a58-efdc-11fd13b2997a"},"source":["# try all codes from 0 to 10\n","for i in range(0,25): \n","  print(decrypt(\"opwwvwv{ht|z'pz'j|{l'huk'j|kks\\x80\", i), i)"],"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["opwwvwv{ht|z'pz'j|{l'huk'j|kks 0\n","novvuvuzgs{y&oy&i{zk&gtj&i{jjr 1\n","mnuututyfrzx%nx%hzyj%fsi%hziiq~ 2\n","lmttstsxeqyw$mw$gyxi$erh$gyhhp} 3\n","klssrsrwdpxv#lv#fxwh#dqg#fxggo| 4\n","jkrrqrqvcowu\"ku\"ewvg\"cpf\"ewffn{ 5\n","ijqqpqpubnvt!jt!dvuf!boe!dveemz 6\n","hippopotamus is cute and cuddly 7\n","ghoonons`ltr\u001fhr\u001fbtsd\u001f`mc\u001fbtcckx 8\n","fgnnmnmr_ksq\u001egq\u001easrc\u001e_lb\u001easbbjw 9\n","efmmlmlq^jrp\u001dfp\u001d`rqb\u001d^ka\u001d`raaiv 10\n","dellklkp]iqo\u001ceo\u001c_qpa\u001c]j`\u001c_q``hu 11\n","cdkkjkjo\\hpn\u001bdn\u001b^po`\u001b\\i_\u001b^p__gt 12\n","bcjjijin[gom\u001acm\u001a]on_\u001a[h^\u001a]o^^fs 13\n","abiihihmZfnl\u0019bl\u0019\\nm^\u0019Zg]\u0019\\n]]er 14\n","`ahhghglYemk\u0018ak\u0018[ml]\u0018Yf\\\u0018[m\\\\dq 15\n","_`ggfgfkXdlj\u0017`j\u0017Zlk\\\u0017Xe[\u0017Zl[[cp 16\n","^_ffefejWcki\u0016_i\u0016Ykj[\u0016WdZ\u0016YkZZbo 17\n","]^eedediVbjh\u0015^h\u0015XjiZ\u0015VcY\u0015XjYYan 18\n","\\]ddcdchUaig\u0014]g\u0014WihY\u0014UbX\u0014WiXX`m 19\n","[\\ccbcbgT`hf\u0013\\f\u0013VhgX\u0013TaW\u0013VhWW_l 20\n","Z[bbabafS_ge\u0012[e\u0012UgfW\u0012S`V\u0012UgVV^k 21\n","YZaa`a`eR^fd\u0011Zd\u0011TfeV\u0011R_U\u0011TfUU]j 22\n","XY``_`_dQ]ec\u0010Yc\u0010SedU\u0010Q^T\u0010SeTT\\i 23\n","WX__^_^cP\\db\u000fXb\u000fRdcT\u000fP]S\u000fRdSS[h 24\n"]}]},{"cell_type":"markdown","metadata":{"id":"jAZsfM6b3Duk"},"source":["# NLTK \n","NLTK is a natural language processing tool kit. It's helpful for doing text processing. We're going to use it to more intelligently tell whether the un-scrambled text includes real words. That way, I don't have ot use my eyeballs as much. In a nutshell, we will ask the computer to scan all words in the English langauge, and compare them against all the decrypted words."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fsoQSpdz3B6e","executionInfo":{"status":"ok","timestamp":1635004329962,"user_tz":420,"elapsed":3053,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}},"outputId":"d843fd9c-b38b-4438-a0ef-fa48be27c49a"},"source":["# Use the NLP toolkit\n","import nltk\n","nltk.download('wordnet')\n","from nltk.corpus import wordnet\n"],"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["[nltk_data] Downloading package wordnet to /root/nltk_data...\n","[nltk_data]   Unzipping corpora/wordnet.zip.\n"]}]},{"cell_type":"code","metadata":{"id":"LXldLYMTz9QD","executionInfo":{"status":"ok","timestamp":1635004329963,"user_tz":420,"elapsed":9,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}}},"source":["# crack the code: examine the message for real words\n","def crack(message, max=25):\n","  for cipher in range(0,max):\n","    words = decrypt(message, cipher)\n","    for word in words.split(\" \"): # tokenize message using spaces, an unsophisicated but practical method\n","      if wordnet.synsets(word): # looks like real words?\n","        return(cipher)"],"execution_count":17,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DK6K-NW868wY"},"source":["## Input from user\n","The `input` function allows you to prompt the user for input."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":351},"id":"OiMK5Trv6o_h","executionInfo":{"status":"error","timestamp":1635006218671,"user_tz":420,"elapsed":6276,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}},"outputId":"95abde0a-1e48-4dec-9fd7-51b0ec6c2ed1"},"source":["secret = input(\"Tell me a secret: \")\n","# Example: o&igt&zgrq&zu&hkky\n","# Example: opwwvwv{ht|z'pz'j|{l'huk'j|kks\\x80\n","# Example: {opz'pz't\\x80'zljyl{\n","# Example: [ipp${ipp${ipp222$Mj$mx$mwr+x$xli$kviex$Yrmw$Tvmqi2\n","\n","# crack the secret\n","cipher = crack(secret)\n","\n","print(\"I think your secret cipher is: \" + str(cipher))\n","print(decrypt(secret, cipher))"],"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["Tell me a secret: bilbo baggin\n","I think your secret cipher is: None\n"]},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-31-0bc69f5885c6>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"I think your secret cipher is: \"\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcipher\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 11\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdecrypt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0msecret\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcipher\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-10-cf1e99e0832c>\u001b[0m in \u001b[0;36mdecrypt\u001b[0;34m(codedMessage, cipher)\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0mletter\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mcodedMessage\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m     \u001b[0mnewLetter\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mchr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mord\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mletter\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mcipher\u001b[0m\u001b[0;34m)\u001b[0m  \u001b[0;31m# \"k\" becomes \"h\" when cipher is 3\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      7\u001b[0m     \u001b[0mdecodedMessage\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdecodedMessage\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mnewLetter\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      8\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: unsupported operand type(s) for -: 'int' and 'NoneType'"]}]},{"cell_type":"markdown","metadata":{"id":"2Acsw4Pt8bM9"},"source":["# Fun Activity\n","Play with encryption and decryption. Review the use of functions, loops, conditions and variables.\n","\n","Work with your friends. Send coded messages. Decode them. Have fun!"]},{"cell_type":"markdown","metadata":{"id":"di1Q_JpfPLIK"},"source":["# Challenge Activity\n","\n","The tree above is what we call \"hard-coded\" with a height of 10. Hard-coded is boring. You can use functions, loops, conditionals and variables to make dynamically sized trees using different symbols based on user supplied **parameters**.\n","\n","For example, if I wanted a tree of height 15, and \"extra-wide\" using the \"+\" symbol, I might call a function like so, where the 3 means three spaces for every one so that it's extra-wide: \n","\n","`makeTree(\"+\", 15, 3)`\n"]},{"cell_type":"markdown","metadata":{"id":"sdx5kE-n-0eY"},"source":["## Dynamic Trees\n","Imagine the tree on a grid with rows and columns. We can go from top to bottom and print the tree as we go. We have to be careful to \"shift\" the tree over a little on the left otherwise it will just look like a staircase.\n","\n","**Play with this code.** Can you take out the spaces so that it looks like a staircase?"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8UqOjm9aD5pu","executionInfo":{"status":"ok","timestamp":1635006271945,"user_tz":420,"elapsed":292,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}},"outputId":"703b19f7-f5c4-4ad1-de06-8ddbdb5a1b6a"},"source":["def makeTree(mark=\"x\", height=10, girth=2):\n","  for row in range(0,height): # top to bottom\n","    print( \" \"*((height-row)*girth) + mark*(girth*row*2) )\n","\n","makeTree(\"x\", 10, 2)"],"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["                    \n","                  xxxx\n","                xxxxxxxx\n","              xxxxxxxxxxxx\n","            xxxxxxxxxxxxxxxx\n","          xxxxxxxxxxxxxxxxxxxx\n","        xxxxxxxxxxxxxxxxxxxxxxxx\n","      xxxxxxxxxxxxxxxxxxxxxxxxxxxx\n","    xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n","  xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx\n"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yEjig8A4ENrO","executionInfo":{"status":"ok","timestamp":1635006331837,"user_tz":420,"elapsed":313,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}},"outputId":"287f10cd-73fd-40a4-d508-211bc7c1f8b2"},"source":["makeTree(\"+\", 20, 1)"],"execution_count":34,"outputs":[{"output_type":"stream","name":"stdout","text":["                    \n","                   ++\n","                  ++++\n","                 ++++++\n","                ++++++++\n","               ++++++++++\n","              ++++++++++++\n","             ++++++++++++++\n","            ++++++++++++++++\n","           ++++++++++++++++++\n","          ++++++++++++++++++++\n","         ++++++++++++++++++++++\n","        ++++++++++++++++++++++++\n","       ++++++++++++++++++++++++++\n","      ++++++++++++++++++++++++++++\n","     ++++++++++++++++++++++++++++++\n","    ++++++++++++++++++++++++++++++++\n","   ++++++++++++++++++++++++++++++++++\n","  ++++++++++++++++++++++++++++++++++++\n"," ++++++++++++++++++++++++++++++++++++++\n"]}]},{"cell_type":"markdown","metadata":{"id":"xqKDS7YC_2vS"},"source":["## Now: level-up a notch!\n","Combine what you learned about taking user inputs so that your tree is dynamic."]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HjmkDyA5IoHY","executionInfo":{"status":"ok","timestamp":1635006358497,"user_tz":420,"elapsed":328,"user":{"displayName":"Paea LePendu","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjjBoBNwqrnIcn2gzVzyQuTXg90a7dKdyn95xjt=s64","userId":"11673081996783822670"}},"outputId":"96bb5f5d-1ddc-4415-9d5c-a942b57eeb42"},"source":["#@title Design a Tree {run: \"auto\"}\n","mark = '.' #@param {type: \"string\"}\n","height = 8 #@param {type: \"slider\", min:5, max:50, step:1}\n","girth = 1 #@param {type: \"slider\", min:1, max:10, step:1}\n","\n","makeTree(mark, height, girth)"],"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["        \n","       ..\n","      ....\n","     ......\n","    ........\n","   ..........\n","  ............\n"," ..............\n"]}]},{"cell_type":"markdown","metadata":{"id":"1lAWs_BWJaKQ"},"source":["## Challenge Activity\n","Notice how the tree is sort of \"topped\"? Wouldn't it be nice if it had a pointy top? Can you fix the `makeTree` function above so that the tree has a pointy top?\n","\n","HINT: you just need to subtract a few marks at each level, `girth*2-1` of them to be exact."]}]}